/**
 * Internal dependencies
 */
import {
	PanelAdvancedSettings,
	PopoverHelp,
} from '@dpaa/components'
import { STORE_NAME } from '@dpaa/datastore/constants'
import {
	CHAT_LANGUAGES,
	CHAT_CONTENT_STRUCTURES,
	CHAT_WRITING_STYLES,
	CHAT_WRITING_TONES,
	DEFAULT_CHAT_LANGUAGE_CODE,
	DEFAULT_CHAT_WRITING_TONE,
	DEFAULT_CHAT_WRITING_STYLE,
	DEFAULT_CHAT_CONTENT_STRUCTURE,
	DEFAULT_CHAT_MAX_CHAT_LOGS,
	DEFAULT_CHAT_MAX_VISIBLE_CHAT_LOGS,
} from '@dpaa/ai-assistant/constants'

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n'
import {
	Flex,
	FlexItem,
	RangeControl,
	SelectControl,
	TextareaControl,
} from '@wordpress/components'
import {
	useDispatch,
} from '@wordpress/data'
import {
	useEffect,
	useState,
} from '@wordpress/element'
import {
	postComments as postCommentsIcon
} from '@wordpress/icons'

export const TextGenerationSettings = ( { pluginSettings } ) => {

	// 各パラメータの状態管理用
	const [ language, setLanguage ] = useState( pluginSettings?.textGenerationSettings?.language || DEFAULT_CHAT_LANGUAGE_CODE )
	const [ writingTone, setWritingTone ] = useState( pluginSettings?.textGenerationSettings?.writingTone || DEFAULT_CHAT_WRITING_TONE )
	const [ writingStyle, setWritingStyle ] = useState( pluginSettings?.textGenerationSettings?.writingStyle || DEFAULT_CHAT_WRITING_STYLE )
	const [ contentStructure, setContentStructure ] = useState( pluginSettings?.textGenerationSettings?.contentStructure || DEFAULT_CHAT_CONTENT_STRUCTURE )
	const [ maxChatLogs, setMaxChatLogs ] = useState( pluginSettings?.textGenerationSettings?.maxChatLogs || DEFAULT_CHAT_MAX_CHAT_LOGS )
	const [ maxVisibleChatLogs, setMaxVisibleChatLogs ] = useState( pluginSettings?.textGenerationSettings?.maxVisibleChatLogs || DEFAULT_CHAT_MAX_VISIBLE_CHAT_LOGS )
	const [ customPrompt, setCustomBehavior ] = useState( pluginSettings?.textGenerationSettings?.customPrompt || '' )

	// グローバル設定の更新用(ストア更新前の状態管理用)
	const { setSetting } = useDispatch( STORE_NAME )
	const updateSetting = ( key, value ) => {
		setSetting( { 'textGenerationSettings': key }, value );
	};
	useEffect( () => updateSetting( 'language', language ), [ language ] );
	useEffect( () => updateSetting( 'writingTone', writingTone ), [ writingTone ] );
	useEffect( () => updateSetting( 'writingStyle', writingStyle ), [ writingStyle ] );
	useEffect( () => updateSetting( 'contentStructure', contentStructure ), [ contentStructure ] );
	useEffect( () => updateSetting( 'customPrompt', customPrompt ), [ customPrompt ] );
	useEffect( () => updateSetting( 'maxChatLogs', parseInt( maxChatLogs, 10 ) ), [ maxChatLogs ] );
	useEffect( () => updateSetting( 'maxVisibleChatLogs', parseInt( maxVisibleChatLogs, 10 ) ), [ maxVisibleChatLogs ] );

	return (
		<PanelAdvancedSettings
			title={ sprintf( __( '%s Settings', dpaa.i18n ), __( 'Text Generation', dpaa.i18n ) ) }
			className='dpaa-components-panel __option-settings'
			initialOpen={ false }
			hasToggle={ false }
			titleLeftIcon={ postCommentsIcon }
		>
			<Flex
				direction='column'
				gap={ 3 }
				className='dpaa-ai-assistant--settings__components-flex __chat'
			>
				<FlexItem>
					<SelectControl
						__next40pxDefaultSize
						size='__unstable-large'
						label={ __( 'Select Language', dpaa.i18n ) }
						help={ __( 'Select a language to generate contents with the language.', dpaa.i18n ) }
						value={ language }
						options={ CHAT_LANGUAGES }
						onChange={ newVal => setLanguage( newVal ) }
					/>
				</FlexItem>
				<FlexItem>
					<SelectControl
						__next40pxDefaultSize
						size='__unstable-large'
						label={ __( 'Content Structure', dpaa.i18n ) }
						help={ sprintf( __( 'Select the %s of the sentences generated by AI.', dpaa.i18n ), __( 'basic structure', dpaa.i18n ) ) }
						value={ contentStructure }
						options={ CHAT_CONTENT_STRUCTURES }
						onChange={ newVal => setContentStructure( newVal ) }
					/>
				</FlexItem>
				<FlexItem>
					<SelectControl
						__next40pxDefaultSize
						size='__unstable-large'
						label={ __( 'AI Writing Style', dpaa.i18n ) }
						help={ sprintf( __( 'Select the %s of the sentences generated by AI.', dpaa.i18n ), __( 'writing style', dpaa.i18n ) ) }
						value={ writingStyle }
						options={ CHAT_WRITING_STYLES }
						onChange={ newVal => setWritingStyle( newVal ) }
					/>
				</FlexItem>
				<FlexItem>
					<SelectControl
						__next40pxDefaultSize
						size='__unstable-large'
						label={ __( 'AI Writing Tone', dpaa.i18n ) }
						help={ sprintf( __( 'Select the %s of the sentences generated by AI.', dpaa.i18n ), __( 'writing tone', dpaa.i18n ) ) }
						value={ writingTone }
						options={ CHAT_WRITING_TONES }
						onChange={ newVal => setWritingTone( newVal ) }
					/>
				</FlexItem>
				<FlexItem>
					<TextareaControl
						__next40pxDefaultSize
						label={ __( 'Custom Prompt', dpaa.i18n ) }
						help={ __( 'In addition to the style and tone you specify, specify your own instructions for the GPT and its character and behavior. Recommended writing prompts in English to save on tokens consumed.', dpaa.i18n ) }
						value={ customPrompt }
						onChange={ newVal => setCustomBehavior( newVal ) }
						rows={ 3 }
						placeholder={ __( 'You are batman as a dark hero. Always respond with cool words.', dpaa.i18n ) }
					/>
				</FlexItem>
				<FlexItem>
					<RangeControl
						label={ `${ __( 'Max number of chat logs', dpaa.i18n ) } (${ __( 'For AI', dpaa.i18n ) })` }
						value={ maxChatLogs }
						allowReset={ true }
						initialPosition={ DEFAULT_CHAT_MAX_CHAT_LOGS }
						resetFallbackValue={ DEFAULT_CHAT_MAX_CHAT_LOGS }
						step={ 1 }
						onChange={ newVal => setMaxChatLogs( newVal ) }
						renderTooltipContent={ value => `${ value } ${ __( 'logs.', dpaa.i18n ) }` }
						min={ 0 }
						max={ 4 }
					/>
					<PopoverHelp
						buttonIcon='warning'
						buttonText={ __( 'About this parameter', dpaa.i18n ) }
						buttonSize='small'
						popoverPosition='bottom left'
						popoverVariant='toolbar'
						popoverOffset={ 5 }
						popoverClass='dpaa-ai-assistant--settings__components-popover'
						popoverNoArrow={ false }
						help={ __( 'Set the maximum number of question and answer logs to keep to ensure natural interactions based on previous chats.', dpaa.i18n ) }
					/>
				</FlexItem>
				<FlexItem>
					<RangeControl
						label={ `${ __( 'Max number of chat logs', dpaa.i18n ) } (${ __( 'For display', dpaa.i18n ) })` }
						help={ __( 'Set the maximum number of question and answer logs to display.', dpaa.i18n ) }
						value={ maxVisibleChatLogs }
						allowReset={ true }
						initialPosition={ DEFAULT_CHAT_MAX_VISIBLE_CHAT_LOGS }
						resetFallbackValue={ DEFAULT_CHAT_MAX_VISIBLE_CHAT_LOGS }
						step={ 1 }
						onChange={ newVal => setMaxVisibleChatLogs( newVal ) }
						renderTooltipContent={ value => `${ value } ${ __( 'logs.', dpaa.i18n ) }` }
						min={ 1 }
						max={ 10 }
					/>
				</FlexItem>
			</Flex>
		</PanelAdvancedSettings>
	)
}

export default TextGenerationSettings